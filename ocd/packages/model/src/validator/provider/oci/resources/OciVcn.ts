/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import * as AutoGenerated from './generated/OciVcn.js'
import * as Model from '../../../../provider/oci/resources.js'
import { OciResources } from '../../../../OcdDesign.js'
import { OcdResourceValidator, OcdValidationResult, OcdValidatorResource } from '../../../OcdResourceValidator.js'

export namespace OciVcn {
    export function validateResource(resource: Model.OciVcn, resources: OciResources): OcdValidationResult[] {
        return [...AutoGenerated.OciVcn.validateResource(resource, resources), ...customValidation(resource, resources)]
    }
    export function isResourceValid(resource: Model.OciVcn, resources: OciResources): boolean {
        return (validateResource(resource, resources).filter((v: OcdValidationResult) => !v.valid).length > 0)
    }
    export function hasErrors(resource: Model.OciVcn, resources: OciResources): boolean {
        return (validateResource(resource, resources).filter((v: OcdValidationResult) => v.type === 'error').length > 0)
    }
    export function hasWarnings(resource: Model.OciVcn, resources: OciResources): boolean {
        return (validateResource(resource, resources).filter((v: OcdValidationResult) => v.type === 'warning').length > 0)
    }
    export function hasInformation(resource: Model.OciVcn, resources: OciResources): boolean {
        return (validateResource(resource, resources).filter((v: OcdValidationResult) => v.type === 'information').length > 0)
    }
    function customValidation(resource: Model.OciVcn, resources: OciResources): OcdValidationResult[] {
        const results: OcdValidationResult[] = [
            ...cidrBlocks(resource, resources),
            ...ipv6cidrBlocks(resource, resources)
        ]
        return results
    }
    const cidrBlocks = (resource: OcdValidatorResource, resources: OciResources): OcdValidationResult[] => {return !resource.isIpv6enabled ? [OcdResourceValidator.validateRequiredStringList(resource.displayName, "cidr_blocks", resource.cidrBlocks, 'IPv4 Cidr Blocks', 'oci-vcn', resources)] : []}
    const ipv6cidrBlocks = (resource: OcdValidatorResource, resources: OciResources): OcdValidationResult[] => {return resource.isIpv6enabled ? [OcdResourceValidator.validateRequiredStringList(resource.displayName, "ipv6_cidr_blocks", resource.ipv6cidrBlocks, 'IPv6 Cidr Blocks', 'oci-vcn', resources)] : []}
}
