/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import { OcdResources } from "../../../OcdDesign.js"
import { OciLoadBalancerBackend } from "./OciLoadBalancerBackend.js"
import * as AutoGenerated from "./generated/OciLoadBalancerBackendSet.js"

export interface OciLoadBalancerBackendSet extends AutoGenerated.OciLoadBalancerBackendSet {}

export namespace OciLoadBalancerBackendSet {
    export namespace HealthChecker {
        export interface HealthChecker extends AutoGenerated.OciLoadBalancerBackendSet.HealthChecker.HealthChecker {}
        export function newHealthChecker(): HealthChecker {return AutoGenerated.OciLoadBalancerBackendSet.HealthChecker.newHealthChecker()}
        
    }
    export function newResource(type?: string): OciLoadBalancerBackendSet {
        const resource = {
            ...AutoGenerated.OciLoadBalancerBackendSet.newResource('load_balancer_backend_set'),
        }
        return resource
    }
    export function cloneResource(resource: OciLoadBalancerBackendSet, type?: string): OciLoadBalancerBackendSet {
        return AutoGenerated.OciLoadBalancerBackendSet.cloneResource(resource, 'load_balancer_backend_set') as OciLoadBalancerBackendSet
    }
    export function allowedParentTypes(): string[] {
        return ['LoadBalancer']
    }
    export function getParentId(resource: OciLoadBalancerBackendSet): string {
        const parentId = resource.loadBalancerId !== '' ? resource.loadBalancerId : resource.compartmentId
        return parentId
    }
    export function setParentId(resource: OciLoadBalancerBackendSet, parentId: string): OciLoadBalancerBackendSet {
        resource.loadBalancerId = parentId
        return resource
    }
    export function getConnectionIds(resource: OciLoadBalancerBackendSet, allResources: OcdResources): string[] {
        // This List of Ids does not include the Parent Id or Compartment Id
        let associationIds: string[] = []
        associationIds =[...associationIds, ...getBackends(resource, allResources).map((r) => r.instanceId)]
        return associationIds
    }
    export function getBackends(resource: OciLoadBalancerBackendSet, allResources: OcdResources): OciLoadBalancerBackend[] {
        return allResources.load_balancer_backend ? allResources.load_balancer_backend.filter((r) => r.loadBalancerId === resource.loadBalancerId && r.backendsetName === resource.displayName) : []
    }
}

export class OciLoadBalancerBackendSetClient extends AutoGenerated.OciLoadBalancerBackendSetClient {
    static new(): OciLoadBalancerBackendSet {
        return OciLoadBalancerBackendSet.newResource()
    }
    static clone(resource: OciLoadBalancerBackendSet): OciLoadBalancerBackendSet {
        return OciLoadBalancerBackendSet.cloneResource(resource)
    }
}

export default OciLoadBalancerBackendSetClient
