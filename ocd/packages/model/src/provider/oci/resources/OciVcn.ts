/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import { OcdUtils } from "@ocd/core"
import { OcdResources } from "../../../OcdDesign.js"
import * as AutoGenerated from "./generated/OciVcn.js"
import { PaletteResource } from "../../../OcdPalette.js"
import { OciDhcpOptions } from "./OciDhcpOptions.js"
import { OciRouteTable } from "./OciRouteTable.js"
import { OciSecurityList } from "./OciSecurityList.js"

export interface OciVcn extends AutoGenerated.OciVcn {}

export namespace OciVcn {
    
    export function newResource(type?: string): OciVcn {
        const resource = {
            ...AutoGenerated.OciVcn.newResource('vcn'),
            cidrBlocks: ['10.0.0.0/16']
        }
        resource.dnsLabel = OcdUtils.toDnsLabel(resource.displayName ? resource.displayName : '')
        return resource
    }
    export function cloneResource(resource: OciVcn, type?: string): OciVcn {
        return AutoGenerated.OciVcn.cloneResource(resource, 'vcn') as OciVcn
    }
    export function allowedParentTypes(): string[] {
        return []
    }
    export function getParentId(resource: OciVcn): string {
        const parentId = resource.compartmentId
        return parentId
    }
    export function setParentId(resource: OciVcn, parentId: string): OciVcn {
        return resource
    }
    export function getConnectionIds(resource: OciVcn, allResources: OcdResources): string[] {
        // This List of Ids does not include the Parent Id or Compartment Id
        let associationIds: string[] = []
        return associationIds
    }
    export function getAdditionalResources(): PaletteResource[] {
        const resources: PaletteResource[] = [
            {
                "container": false,
                "title": "Route Table",
                "class": "oci-route-table",
                "provider": "oci"
            },
            {
                "container": false,
                "title": "Security List",
                "class": "oci-security-list",
                "provider": "oci"
            },
            {
                "container": false,
                "title": "DHCP Options",
                "class": "oci-dhcp-options",
                "provider": "oci"
            }
        ]
        return resources
    }
    export function setAdditionalResourceValues(resource: OciVcn, additionalResource: OciRouteTable | OciSecurityList | OciDhcpOptions) {
        additionalResource.vcnDefault = true
        if (additionalResource.resourceType === 'SecurityList') OciSecurityList.addDefaultRules(additionalResource, resource)
        else if (additionalResource.resourceType === 'DhcpOptions') OciDhcpOptions.addDefaultOptions(additionalResource, resource)
    }
}

export class OciVcnClient extends AutoGenerated.OciVcnClient {
    static new(): OciVcn {
        return OciVcn.newResource()
    }
    static clone(resource: OciVcn): OciVcn {
        return OciVcn.cloneResource(resource)
    }
}

export default OciVcnClient
