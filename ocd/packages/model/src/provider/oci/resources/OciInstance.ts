/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import { OcdResources } from "../../../OcdDesign.js"
import * as AutoGenerated from "./generated/OciInstance.js"

export interface OciInstance extends AutoGenerated.OciInstance {}

export namespace OciInstance {
    export namespace Metadata {
        export interface Metadata extends AutoGenerated.OciInstance.Metadata.Metadata {}
        export function newMetadata(): Metadata {return AutoGenerated.OciInstance.Metadata.newMetadata()}
        
    }
    export namespace AgentConfig {
        export interface AgentConfig extends AutoGenerated.OciInstance.AgentConfig.AgentConfig {}
        export function newAgentConfig(): AgentConfig {return AutoGenerated.OciInstance.AgentConfig.newAgentConfig()}
        
    }
    export namespace CreateVnicDetails {
        export interface CreateVnicDetails extends AutoGenerated.OciInstance.CreateVnicDetails.CreateVnicDetails {}
        export function newCreateVnicDetails(): CreateVnicDetails {return AutoGenerated.OciInstance.CreateVnicDetails.newCreateVnicDetails()}
        
    }
    export namespace ShapeConfig {
        export interface ShapeConfig extends AutoGenerated.OciInstance.ShapeConfig.ShapeConfig {}
        export function newShapeConfig(): ShapeConfig {return AutoGenerated.OciInstance.ShapeConfig.newShapeConfig()}
        
    }
    export namespace SourceDetails {
        export interface SourceDetails extends AutoGenerated.OciInstance.SourceDetails.SourceDetails {}
        export function newSourceDetails(): SourceDetails {return AutoGenerated.OciInstance.SourceDetails.newSourceDetails()}
        
    }
    export function newResource(type?: string): OciInstance {
        const resource = {
            ...AutoGenerated.OciInstance.newResource('instance'),
        }
        if (resource.createVnicDetails) resource.createVnicDetails.hostnameLabel = resource.displayName?.toLowerCase().replace(' ', '')
        return resource
    }
    export function cloneResource(resource: OciInstance, type?: string): OciInstance {
        return AutoGenerated.OciInstance.cloneResource(resource, 'instance') as OciInstance
    }
    export function allowedParentTypes(): string[] {
        return ['Subnet']
    }
    export function getParentId(resource: OciInstance): string {
        const parentId = resource.createVnicDetails && resource.createVnicDetails.subnetId !== '' ? resource.createVnicDetails.subnetId as string  : resource.compartmentId as string
        return parentId
    }
    export function setParentId(resource: OciInstance, parentId: string): OciInstance {
        if (resource.createVnicDetails) resource.createVnicDetails.subnetId = parentId
        return resource
    }
    export function getConnectionIds(resource: OciInstance, allResources: OcdResources): string[] {
        // This List of Ids does not include the Parent Id or Compartment Id
        let associationIds: string[] = []
        associationIds = [...associationIds, ...allResources.volume_attachment ? allResources.volume_attachment.filter((v) => v.instanceId === resource.id).map((v) => v.volumeId) : []]
        associationIds = [...associationIds, ...allResources.boot_volume_attachment ? allResources.boot_volume_attachment.filter((v) => v.instanceId === resource.id).map((v) => v.bootVolumeId) : []]
        if (resource.createVnicDetails) associationIds = [...associationIds, ...resource.createVnicDetails.nsgIds ? resource.createVnicDetails.nsgIds : []]
        return associationIds
    }
}

export class OciInstanceClient extends AutoGenerated.OciInstanceClient {
    static new(): OciInstance {
        return OciInstance.newResource()
    }
    static clone(resource: OciInstance): OciInstance {
        return OciInstance.cloneResource(resource)
    }
}

export default OciInstanceClient
