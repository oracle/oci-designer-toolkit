/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import { OcdUtils } from "@ocd/core"
import { OcdDesign } from "@ocd/model"
import { OcdProviderExporter } from "./OcdProviderExporter.js"
import { OutputDataStringArray } from "../OcdExporter.js"
import * as GoogleTerraformResources  from './provider/google/resources.js'

interface ResourceMap extends Record<string, string> {}

export class GoogleExporter extends OcdProviderExporter {
    terraform: string = ''
    resourceFileMap: ResourceMap = {
        compute_network: "google_networking.tf",

        unknown: "google_unspecified.tf"
    }
    // Google Methods
    export = (design: OcdDesign): OutputDataStringArray => {
        // Id to Terraform Resource Name Map
        const idTFResourceMap: Record<string, string> = OcdDesign.getGoogleResources(design).reduce((a, c) => {a[c.id] = c.terraformResourceName; return a}, {} as Record<string, string>)
        console.debug('GoogleExporter: export: idTFResourceMap:', idTFResourceMap)
        let outputData: OutputDataStringArray = {}
        if (Object.keys(idTFResourceMap).length > 0) {
            const uniqueFilenames = [...new Set(Object.values(this.resourceFileMap))]
            outputData = {
                "google_provider.tf": [this.googleProvider()],
                "google_provider_variables.tf": [this.googleProviderVariables()],
                "google_connection.tfvars": [this.googleProviderTFVars()],
                "google_metadata.tf": [this.googleMetadata()],
                ...uniqueFilenames.toSorted(OcdUtils.simpleSort).reduce((a, c) => {a[c] = [this.autoGeneratedNotice()]; return a}, {} as Record<string, string[]>),
                "google_user_variables.tf": [this.googleUserVariables(design)],
            }
            // Generate Google Terraform
            Object.entries(design.model.google.resources).forEach(([k, v]) => {
                const className = OcdUtils.toClassName('Google', k)
                const filename = this.resourceFileMap.hasOwnProperty(k) ? this.resourceFileMap[k] : this.resourceFileMap['unknown']
                // @ts-ignore
                v.forEach((r: OciResource) => {
                    // @ts-ignore 
                    const tfResource = new GoogleTerraformResources[className](r, idTFResourceMap)
                    if (!outputData.hasOwnProperty(filename)) outputData[filename] = [this.autoGeneratedNotice()]
                    outputData[filename].push(tfResource.generate(r, design))
                })
            })
        }
        return outputData
    }
    googleProvider = () => {return `${this.autoGeneratedNotice()}
terraform {
    required_version = ">= 1.5.0"
}

# ------ Configure the Google GCP Provider
provider "google" {
  project     = var.google_project_id
  region      = var.google_region
}`
    }
    googleProviderVariables = () => {return `${this.autoGeneratedNotice()}`}
    googleProviderTFVars = (useConfig: boolean = false) => {return `${this.autoGeneratedNotice()}`}
    googleMetadata = () => {return `${this.autoGeneratedNotice()}`}
    googleUserVariables = (design: OcdDesign) => {return `${this.autoGeneratedNotice()}
${design.model.google.vars.map((v) => this.variableStatement(v)).join('')}
    `}
}