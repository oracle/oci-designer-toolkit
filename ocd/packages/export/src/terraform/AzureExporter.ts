/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import { OcdUtils } from "@ocd/core";
import { OcdDesign } from "@ocd/model";
import { OcdProviderExporter } from "./OcdProviderExporter.js"
import { OutputDataStringArray } from "../OcdExporter.js";
import * as AzureTerraformResources  from './provider/azure/resources.js'

interface ResourceMap extends Record<string, string> {}

export class AzureExporter extends OcdProviderExporter {
    terraform: string = ''
    resourceFileMap: ResourceMap = {
        dns_zone: "azure_networking.tf",
        load_balancer: "azure_networking.tf",
        subnet: "azure_networking.tf",
        virtual_network: "azure_networking.tf",

        virtual_machine: "azure_compute.tf",

        container_registry: "azure_container.tf",
        kubernetes_cluster: "azure_container.tf",

        unknown: "azure_unspecified.tf"
    }
    // Azure Methods
    export = (design: OcdDesign): OutputDataStringArray => {
        // Id to Terraform Resource Name Map
        const idTFResourceMap: Record<string, string> = OcdDesign.getAzureResources(design).reduce((a, c) => {a[c.id] = c.terraformResourceName; return a}, {} as Record<string, string>)
        console.debug('OcdTerraformExporter: azureExport: idTFResourceMap:', idTFResourceMap)
        let outputData: OutputDataStringArray = {}
        if (Object.keys(idTFResourceMap).length > 0) {
            const uniqueFilenames = [...new Set(Object.values(this.resourceFileMap))]
            outputData = {
                "azure_provider.tf": [this.azureProvider()],
                "azure_provider_variables.tf": [this.azureProviderVariables()],
                // "azure_connection.tfvars": [this.azureProviderTFVars()],
                "azure_connection.tfvars": [this.azureProviderTFVars()],
                "azure_metadata.tf": [this.azureMetadata()],
                ...uniqueFilenames.toSorted(OcdUtils.simpleSort).reduce((a, c) => {a[c] = [this.autoGeneratedNotice()]; return a}, {} as Record<string, string[]>),
                // "azure_user_variables.tf": [this.azureUserVariables(design)],
            }
            // Generate Azure Terraform
            Object.entries(design.model.azure.resources).forEach(([k, v]) => {
                const className = OcdUtils.toClassName('Azure', k)
                const filename = this.resourceFileMap.hasOwnProperty(k) ? this.resourceFileMap[k] : this.resourceFileMap['unknown']
                // @ts-ignore
                v.forEach((r: OciResource) => {
                    // @ts-ignore 
                    const tfResource = new AzureTerraformResources[className](r, idTFResourceMap)
                    if (!outputData.hasOwnProperty(filename)) outputData[filename] = [this.autoGeneratedNotice()]
                    outputData[filename].push(tfResource.generate(r, design))
                })
            })
        }
        return outputData
    }
    azureProvider = () => {return `${this.autoGeneratedNotice()}
terraform {
    required_version = ">= 1.5.0"
}

# ------ Configure the Microsoft Azure Provider
provider "azurerm" {
  features {}

  client_id                   = var.azure_client_id
  client_certificate_path     = var.azure_client_certificate_path
  client_certificate_password = var.azure_client_certificate_password
  tenant_id                   = var.azure_tenant_id
  subscription_id             = var.azure_subscription_id
}`
    }
    azureProviderVariables = () => {return `${this.autoGeneratedNotice()}
variable "azure_tenant_id" {
    type = string
    description = "OCID of the Tenancy where the defined resources will be created."
}
variable "azure_client_id" {
    type = string
    description = "OCID of the User who will create the defined resources."
}
variable "azure_client_certificate_password" {
    type = string
    description = "Fingerprint associated with the Private Key File."
}
variable "azure_client_certificate_path" {
    type = string
    description = "Path to the user_ocid users Private Key File."
}
variable "azure_subscription_id" {
    type = string
    description = "OCID of the Compartment where the defined resources will be created."
}
    `}
    azureProviderTFVars = (useConfig: boolean = false) => {return `${this.autoGeneratedNotice()}
# -- Tenancy Information
azure_tenant_id = "${useConfig ? 'Read from Config' : 'Enter your destination Tenancy OCID here, e.g. ocid1.tenancy.oc1....... (See ~/.oci/config->tenancy)'}"
azure_subscription_id = "${useConfig ? 'Read from Config' : 'Enter your destination Compartment OCID here, e.g. ocid1.compartment.oc1......'}"

# -- User Information
azure_client_id = "${useConfig ? 'Read from Config' : 'Enter your User OCID here, e.g. ocid1.user.oc1...... (See ~/.oci/config->user)'}"
azure_client_certificate_path = "${useConfig ? 'Read from Config' : 'Enter the absolute path to the Private Key file associated with the user_ocid. (See ~/.oci/config->key_file)'}"
azure_client_certificate_password = "${useConfig ? 'Read from Config' : 'Enter the fingerprint associated with the specified private_key_file. (See ~/.oci/config->fingerprint)'}"
    `}

    azureMetadata = () => {return `${this.autoGeneratedNotice()}
`
    }
    
}