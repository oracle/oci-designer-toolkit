/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import fs from 'fs'
import path from 'path'
import { OcdCodeGenerator } from './OcdCodeGenerator.js'
import { OcdSchema } from '../types/OcdSchema.js'

export class OcdSvgCssGenerator extends OcdCodeGenerator {
    constructor () {
        super()
    }

    generate(resource: string, schema: OcdSchema) {return}
    content = (resource: string, schema: OcdSchema) => {return ''}
    autoGeneratedContent = (resource: string, schema: OcdSchema) => {return ''}

    writeFiles(outputDirectory: string, resource: string, force = false) {
        const outputFilename = 'OcdSvgCssData.ts'
        const resourceFilename = path.join(outputDirectory, outputFilename)
        console.debug('SVG Css')
        // Read package.json specified in resource
        const cssFiles = fs.readdirSync(resource).filter((f) => path.extname(f) === '.css')
        const content = `${this.copyright()}
${this.autoGeneratedWarning()}

import { OcdDesign } from "@ocd/model"

export const svgCssData: Record<string, string> = {
    ${cssFiles.map((f) => `'${f}': String.raw\`${fs.readFileSync(path.join(resource, f), 'utf8')}\``).join(',\n\n    ')}
}

export const ociSvgThemeCss = svgCssData['oci-theme.css']
export const azureSvgThemeCss = svgCssData['azure-theme.css']
export const generalSvgThemeCss = svgCssData['general-theme.css']
export const googleSvgThemeCss = svgCssData['google-theme.css']
export const svgSvgCss = svgCssData['ocd-svg.css']

export const getSvgCssData = (design: OcdDesign): string[] => {
    let cssData = [ociSvgThemeCss, svgSvgCss]
    if (design.model.general && Object.keys(design.model.general).length > 0) cssData = [...cssData, generalSvgThemeCss]
    if (design.model.azure && Object.keys(design.model.azure).length > 0) cssData = [...cssData, azureSvgThemeCss]
    if (design.model.google && Object.keys(design.model.google).length > 0) cssData = [...cssData, googleSvgThemeCss]
    return cssData
}

export default svgCssData

`
        if (force || !fs.existsSync(resourceFilename)) {
            console.info(`Writting Resource File : ${resourceFilename}`)
            fs.writeFileSync(resourceFilename, content)
        } else {
            console.info(`Resource File already exists : ${resourceFilename}`)
        }
    }
    writeResourceFiles(outputDirectory: string, resource: string, force = false) {return}
    writeGeneratedResourceFiles(outputDirectory: string, resource: string, force = false) {return}
}

export default OcdSvgCssGenerator
// module.exports = { OcdSvgCssGenerator }
