/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/
// TODO: Remove Following
// @ts-nocheck

import { OcdSchema } from '../types/OcdSchema.js'
import { OcdCodeGenerator } from './OcdCodeGenerator.js'
import { OcdUtils } from '@ocd/core'

export class OcdExcelGenerator extends OcdCodeGenerator {
    simpleTypes = ['string', 'bool', 'number']
    constructor (prefix: string='Oci') {
        super(prefix)
        this.ignoreAttributes = [...this.commonElements, ...this.commonIgnoreElements]
    }

    /*
    ** Content for the top level file. This will only be created if it does not exists.
    */
    content = (resource: string, schema: OcdSchema) => {
        const contents = `${this.copyright()}
    
import * as AutoGenerated from "./${this.generatedDirectory()}/${this.interfaceName(resource)}.js"

export class ${this.resourceName(resource)} extends AutoGenerated.${this.autoGeneratedResourceName(resource)} {}

export default ${this.resourceName(resource)}
`
        return contents
       }
    
    /*
    ** Content for the auto generated file this will be written on each execution.
    */
    autoGeneratedContent = (resource: string, schema: OcdSchema) => {
        const contents = `${this.copyright()}
${this.autoGeneratedWarning()}
/* eslint-disable @typescript-eslint/no-unused-vars */

import { ExcelColumnProperties } from '../../../../OcdExcelResource.js'
import { ${this.prefix}ExcelResource } from '../../${this.prefix}ExcelResource.js'
import { ${this.prefix}ModelResources as Model, ${this.prefix}Resource } from '@ocd/model'
import { TableColumnProperties } from 'exceljs'

export class ${this.autoGeneratedResourceName(resource)} extends ${this.prefix}ExcelResource {
    resource: Model.${this.interfaceName(resource)}
    allResources: ${this.prefix}Resource[]
    constructor(resource: Model.${this.interfaceName(resource)}, allResources: ${this.prefix}Resource[]) {
        super()
        this.resource = resource
        this.allResources = allResources
    }

    /*
    ** Generate Excel Resource / Data Statement(s)
    */
    generate(resource: Model.${this.interfaceName(resource)} | undefined, allResources: ${this.prefix}Resource[] | undefined) {
        resource = resource ? resource : this.resource
        allResources = allResources ? allResources : this.allResources
        const rows = [...this.ociCommonGeneration(resource), ...this.resourceRowGeneration(resource), ...this.resourceTagGeneration(resource)]
        return rows
    }
    columns = () => [...this.ociCommonColumns(), ...this.resourceColumns(), ...this.resourceTagColumns()]
    tableColumns = () => [...this.ociCommonTableColumns(), ...this.resourceTableColumns(), ...this.resourceTagTableColumns()]
    resourceRowGeneration = (resource: Model.${this.interfaceName(resource)}): any[] => []
    resourceColumns = (): ExcelColumnProperties[] => []
    resourceTableColumns = (): TableColumnProperties[] => []
}

export default ${this.autoGeneratedResourceName(resource)}
`
        return contents
    }

    attributeToExcelAssignment = (resource, name, attribute, level=0) => {
        const levelString = level === 0 ? '' : ', level+1'
        if (attribute.type === 'string' && attribute.lookup)                  return `\${this.${this.excelSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'string')                                 return `\${this.${this.excelSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'bool')                                   return `\${this.${this.excelSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'number')                                 return `\${this.${this.excelSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'list' && attribute.subtype === 'string') return `\${this.${this.excelSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'object')                                 return `\${this.${this.excelObjectName(attribute.id)}(resource.${this.modelElementName(attribute.name)}${levelString})}`
        else if (attribute.type === 'list' && attribute.subtype === 'object') return `\${this.${this.excelObjectListName(attribute.id)}(resource.${this.modelElementName(attribute.name)}${levelString})}`
        else if (attribute.type === 'list' && attribute.lookup)               return `\${this.${this.excelSimpleName(attribute.id)}(resource${levelString})}`
        else return `# ${this.toCamelCase(name)} Type ${attribute.type} SubType ${attribute.subtype} Required ${attribute.required}`
    }

    excelSimpleElementType = (resource, name, attribute, level=0, resourceName='common') => {
        const  lookupString = attribute.lookupResourceElement && attribute.lookupResourceElement !== '' ? `, '${attribute.lookupResourceElement}'` : ''
        if (attribute.type === 'string' && attribute.staticLookup)            return `this.generateTextAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required}, level)`
        else if (attribute.type === 'string' && attribute.lookup)             return `this.generateReferenceAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required}, level${lookupString}, this.allResources)`
        else if (attribute.type === 'string' && attribute.subtype === 'code') return `this.generateCodeAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required}, level)`
        else if (attribute.type === 'string')                                 return `this.generateTextAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required}, level)`
        else if (attribute.type === 'bool')                                   return `this.generateBooleanAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required}, level)`
        else if (attribute.type === 'number')                                 return `this.generateNumberAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required}, level)`
        else if (attribute.type === 'list' && attribute.lookup)               return `this.generateReferenceListAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required}, level, this.allResources)`
        else if (attribute.type === 'list' && attribute.subtype === 'string') return `this.generateStringListAttribute("${name}", resource.${this.toCamelCase(name)}, ${attribute.required}, level)`
        else return `'# ${this.toCamelCase(name)} Type ${attribute.type} Required ${attribute.required}'`
    }

    excelSimpleElement = (resource, attribute, level=0) => {
        const simpleTypes = ['string', 'bool', 'number']
        const groupTypes = ['list', 'set']
        if (simpleTypes.includes(attribute.type) || (groupTypes.includes(attribute.type) && simpleTypes.includes(attribute.subtype))) {
            return `// ${OcdUtils.toResourceTypeName(attribute.name)} (${this.excelSimpleName(attribute.id)})
    ${this.excelSimpleName(attribute.id)} = (resource: Record<string, any>, level=0): string => {return ${this.excelSimpleElementType(resource, attribute.name, attribute)}}
    `
        } else return ''
    }

    excelComplextElement = (resource, attribute) => {
        if (attribute.type === 'object') return this.excelObjectElement(resource, attribute)
        else if (attribute.type === 'list' && attribute.subtype === 'object') return this.excelObjectListElement(resource, attribute)
        else return ``
    }

    excelObjectElement = (resource, attribute, level=0) => {
        // return `${this.excelObjectName(attribute.name)} = (resource: Record<string, any>): string => {
        return `// ${OcdUtils.toResourceTypeName(attribute.name)} (${this.excelObjectName(attribute.id)})
    ${this.excelObjectName(attribute.id)} = (resource: ${this.generateModelHierarchyReference(resource, attribute.id)} | undefined, level=0): string => {
            return resource ? \`
    
\${this.heading[level]} ${OcdUtils.toTitle(attribute.name)}
    
| Attribute | Value |
| --------- | ----- |
${Object.entries(attribute.attributes).filter(([k, v]) => !this.ignoreAttributes.includes(v.id)).map(([k, a]) => this.attributeToExcelAssignment(resource, k, a, level+1)).join('\n')}\` : ''
    }
    `
    }

    excelObjectListElement = (resource, attribute, level=0) => {
        return `${this.excelObjectElement(resource, attribute)}
    // ${OcdUtils.toResourceTypeName(attribute.name)} (${this.excelObjectListName(attribute.id)})
    ${this.excelObjectListName(attribute.id)} = (objectList: ${this.generateModelHierarchyReference(resource, attribute.id)}[] | undefined, level=0): string => {
        return objectList && objectList.length > 0 ? \`\${objectList.map((o: ${this.generateModelHierarchyReference(resource, attribute.id)}) => this.${this.excelObjectName(attribute.id)}(o)).join(\`\\n\`)}\` : ''
    }
    `
    }

    excelSimpleName = (name: string) => `${this.toSimpleName(name)}`
    excelObjectName = (name: string) => `${this.toObjectName(name)}`
    excelObjectListName = (name: string) => `${this.toObjectListName(name)}`
            
    outputFilename = (resource: string) => `${this.excelFilename(resource)}.ts`
}

export default OcdExcelGenerator
// module.exports = { OcdExcelGenerator }
