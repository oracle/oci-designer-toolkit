/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import { OcdUtils } from '@ocd/core'
import { OcdSchema, OcdSchemaAttribute, OcdSchemaResource } from '../types/OcdSchema.js'
import { OcdCodeGenerator } from './OcdCodeGenerator.js'

export class OcdTerraformGenerator extends OcdCodeGenerator {
    terraformMetadataOverrides: Record<string, Record<string, any>> = {}
    constructor (prefix: string='Oci', commonElements: string[]=[], commonIgnoreElements: string[]=[]) {
        super(prefix, commonElements, commonIgnoreElements)
    }

    /*
    ** Content for the top level file. This will only be created if it does not exists.
    */
    content = (resource: string, schema: OcdSchema | OcdSchemaResource) => {
        const contents = `${this.copyright()}
    
import * as AutoGenerated from "./${this.generatedDirectory()}/${this.interfaceName(resource)}.js"

export class ${this.resourceName(resource)} extends AutoGenerated.${this.autoGeneratedResourceName(resource)} {}

export default ${this.resourceName(resource)}
`
        return contents
    }

    /*
    ** Content for the auto generated file this will be written on each execution.
    */
    autoGeneratedContent = (resource: string, schema: OcdSchema | OcdSchemaResource) => {
        const schemaObjects = this.getSchemaObjects(schema)
        const schemaAttributes = this.getSchemaAttributes(schema)
        const cacheLookupAttributes = schemaAttributes.filter((a: OcdSchemaAttribute) => a.cacheLookup)
        const extraConstructorParameters = this.prefix.toLowerCase() === 'oci' ? ', isIgnoreCompartmentId: boolean = false' : ''
        const extraSuperParameters = this.prefix.toLowerCase() === 'oci' ? ', isIgnoreCompartmentId' : ''
        const contents = `${this.copyright()}
${this.autoGeneratedWarning()}
/* eslint-disable @typescript-eslint/no-unused-vars */

import { ${this.prefix}TerraformResource } from '../../${this.prefix}TerraformResource.js'
import { ${this.prefix}ModelResources as Model, OcdDesign, ${this.prefix}Resource } from '@ocd/model'

export class ${this.autoGeneratedResourceName(resource)} extends ${this.prefix}TerraformResource {
    resource: Model.${this.interfaceName(resource)}
    constructor(resource: Model.${this.interfaceName(resource)}, idTFResourceMap: Record<string, string> = {}, isHomeRegion: boolean = false${extraConstructorParameters}) {
        super(idTFResourceMap, isHomeRegion${extraSuperParameters})
        this.resource = resource
        this.terraformResourceName = resource.terraformResourceName
    }

    /*
    ** Generate Reference Lookups
    */
    generateReference(resource: Model.${this.interfaceName(resource)}) {
        return [${cacheLookupAttributes.map((a: OcdSchemaAttribute) => this.terraformReferenceDataFunctionName(a.lookupResource)).join(',')}].join('')
    }

    /*
    ** Generate Terraform Resource / Data Statement(s)
    */
    generate(resource: Model.${this.interfaceName(resource)}, design: OcdDesign) {
        resource = resource ? resource : this.resource
        if (resource.locked) {
            return this.generateData(resource)
        } else {
            return this.generateResource(resource, design)
        }
    }

    generateResource(resource: Model.${this.interfaceName(resource)}, design: OcdDesign) {
        const content = \`\${this.generateReference(resource)}
# ------ Create ${OcdUtils.toTitle(resource)}
resource "${schema.tf_resource}" "\${resource.terraformResourceName}" {
    \${this.commonAssignments(resource)}
    ${Object.entries(schema.attributes).filter(([k, v]) => !this.ignoreAttributes.includes(v.id)).map(([k, a]) => this.attributeToTerraformAssignment(resource, k, a)).join('\n    ')}
    \${this.tags(resource, design)}
}

locals {
    \${resource.terraformResourceName}_id = ${schema.tf_resource}.\${resource.terraformResourceName}.id
    \${this.generateAdditionalResourceLocals(resource)}
}

\${this.generateAdditionalResource(resource)}
\`
    return content
    }

    generateData(resource: Model.${this.interfaceName(resource)}) {
        const content = \`
# ------ Read ${OcdUtils.toTitle(resource)}
data "${schema.tf_resource}s" "\${resource.terraformResourceName}" {
    # Required
    compartment_id = "\${resource.compartmentId}"
    filter {
        name = "id"
        values = ["\${resource.id}"]
    }
}

locals {
    \${resource.terraformResourceName}_id = "\${resource.id}"
    \${resource.terraformResourceName}_ocid = "\${resource.id}"
}
\`
    return content
    }
    // Complex Elements
    ${schemaObjects.map((a: OcdSchemaAttribute) => this.terraformComplexElement(resource, a)).filter((s: string) => s.trim() !== '').join('\n    ')}
    // Simple Elements
    ${schemaAttributes.filter((a: OcdSchemaAttribute) => !this.ignoreAttributes.includes(a.id)).map((a: OcdSchemaAttribute) => this.terraformSimpleElement(resource, a)).filter((s: string) => s.trim() !== '').join('\n    ')}
    
}

export default ${this.autoGeneratedResourceName(resource)}
`
        return contents
    }

    simpleAttributeAssignmentTest = (resource: string, name: string, attribute: OcdSchemaAttribute) => {
        return `this.isPropertyAssignConditionTrue(${attribute.conditional}, ${JSON.stringify(attribute.condition)}, resource, rootResource) ? this.isGenerateAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}) : false`
    }

    attributeToAssignmentTest = (resource: string, name: string, attribute: OcdSchemaAttribute) => {
        if (attribute.type === 'string' && attribute.lookup)                  return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource)`
        else if (attribute.type === 'string')                                 return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource)`
        else if (attribute.type === 'bool')                                   return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource)`
        else if (attribute.type === 'number')                                 return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource)`
        else if (attribute.type === 'list' && attribute.subtype === 'string') return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource)`
        else if (attribute.type === 'object')                                 return `this.${this.terraformObjectAssignmentTestName(attribute.id)}(resource.${this.modelElementName(attribute.name)}, rootResource)`
        else if (attribute.type === 'list' && attribute.subtype === 'object') return `this.${this.terraformObjectListAssignmentTestName(attribute.id)}(resource.${this.modelElementName(attribute.name)}, rootResource)`
        else if (attribute.type === 'list' && attribute.lookup)               return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource)`
        else return `false`
    }

    attributeToTerraformAssignment = (resource: string, name: string, attribute: OcdSchemaAttribute, level=0) => {
        const levelString = level === 0 ? ', resource' : ', rootResource, level+1'
        if (attribute.type === 'string' && attribute.lookup)                  return `\${this.${this.terraformSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'string')                                 return `\${this.${this.terraformSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'bool')                                   return `\${this.${this.terraformSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'number')                                 return `\${this.${this.terraformSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'list' && attribute.subtype === 'string') return `\${this.${this.terraformSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'list' && attribute.lookup)               return `\${this.${this.terraformSimpleName(attribute.id)}(resource${levelString})}`
        else if (attribute.type === 'object')                                 return `\${this.${this.terraformObjectName(attribute.id)}(resource.${this.modelElementName(attribute.name)}${levelString})}`
        else if (attribute.type === 'list' && attribute.subtype === 'object') return `\${this.${this.terraformObjectListName(attribute.id)}(resource.${this.modelElementName(attribute.name)}${levelString})}`
        else return `# ${this.toCamelCase(attribute.name)} Type ${attribute.type} SubType ${attribute.subtype} Required ${attribute.required}`
    }

    terraformSimpleElementType = (resource: string, name: string, attribute: OcdSchemaAttribute, level=0, resourceName='common') => {
        const mentadataAttributes = {...this.terraformMetadataOverrides.common, ...Object.hasOwn(this.terraformMetadataOverrides, resourceName) ? this.terraformMetadataOverrides[resourceName] : {}}
        // const lookupString = attribute.lookupResourceElement && attribute.lookupResourceElement !== '' ? `, '${attribute.lookupResourceElement}'` : ''
        if (Object.hasOwn(mentadataAttributes, attribute.name)) return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateMetadataAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, '${mentadataAttributes[attribute.name]}', level) : ''`
        // else if (attribute.type === 'string' && attribute.cacheLookup)        return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateCacheAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level, '${attribute.lookupResource}') : ''`
        // else if (attribute.type === 'string' && attribute.staticLookup)       return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateTextAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
        // else if (attribute.type === 'string' && attribute.lookup)             return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateReferenceAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level${lookupString}) : ''`
        // else if (attribute.type === 'string')                                 return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateTextAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
        else if (attribute.type === 'string')                   return this.terraformSimpleStringElementType(resource, name, attribute, level, resourceName)
        else if (attribute.type === 'bool')                     return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateBooleanAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
        else if (attribute.type === 'number')                   return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateNumberAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
        // else if (attribute.type === 'list' && attribute.lookup)               return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateReferenceListAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
        // else if (attribute.type === 'list' && attribute.subtype === 'string') return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateStringListAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
        else if (attribute.type === 'list')                     return this.terraformSimpleListElementType(resource, name, attribute, level, resourceName)
        else return `'# ${this.toCamelCase(attribute.name)} Type ${attribute.type} Required ${attribute.required}'`
    }

    terraformSimpleStringElementType = (resource: string, name: string, attribute: OcdSchemaAttribute, level=0, resourceName='common') => {
        const lookupString = attribute.lookupResourceElement && attribute.lookupResourceElement !== '' ? `, '${attribute.lookupResourceElement}'` : ''
        if (attribute.cacheLookup)       return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateCacheAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level, '${attribute.lookupResource}') : ''`
        else if (attribute.staticLookup) return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateTextAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
        else if (attribute.lookup)       return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateReferenceAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level${lookupString}) : ''`
        else                             return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateTextAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
    }

    terraformSimpleListElementType = (resource: string, name: string, attribute: OcdSchemaAttribute, level=0, resourceName='common') => {
        if (attribute.lookup)                    return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateReferenceListAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
        else if (attribute.subtype === 'string') return `this.${this.terraformSimpleAssignmentTestName(attribute.id)}(resource, rootResource) ? this.generateStringListAttribute("${attribute.name}", resource.${this.toCamelCase(attribute.name)}, ${attribute.required}, level) : ''`
        else return `'# ${this.toCamelCase(attribute.name)} Type ${attribute.type} Required ${attribute.required}'`
    }


    terraformSimpleElement = (resource: string, attribute: OcdSchemaAttribute, level=0) => {
        const simpleTypes = ['string', 'bool', 'number']
        const groupTypes = ['list', 'set']
        if (simpleTypes.includes(attribute.type) || (groupTypes.includes(attribute.type) && simpleTypes.includes(attribute.subtype))) {
            return `// ${OcdUtils.toResourceTypeName(attribute.name)} (${this.terraformSimpleName(attribute.id)})
    ${this.terraformSimpleName(attribute.id)} = (resource: Record<string, any>, rootResource: ${this.prefix}Resource, level=0): string => {return ${this.terraformSimpleElementType(resource, attribute.name, attribute)}}
    ${this.terraformSimpleAssignmentTestName(attribute.id)} = (resource: Record<string, any>, rootResource: ${this.prefix}Resource): boolean => {return ${this.simpleAttributeAssignmentTest(resource, attribute.name, attribute)}}
    `
            // return `${this.terraformSimpleName(attribute.name)} = (resource: Model.${this.interfaceName(resource)}): string => {return ${this.terraformSimpleElementType(resource, attribute.name, attribute)}}`
        } else return ''
    }

    terraformComplexElement = (resource: string, attribute: OcdSchemaAttribute) => {
        if (attribute.type === 'object') return this.terraformObjectElement(resource, attribute)
        else if (attribute.type === 'list' && attribute.subtype === 'object') return this.terraformObjectListElement(resource, attribute)
        else return ``
    }

    terraformObjectElement = (resource: string, attribute: OcdSchemaAttribute, level=0) => {
        const childAttributes = attribute.attributes ? attribute.attributes : {}
        return `// ${OcdUtils.toResourceTypeName(attribute.name)} (${this.terraformObjectName(attribute.name)})
    ${this.terraformObjectName(attribute.id)} = (resource: ${this.generateModelHierarchyReference(resource, attribute.id)} | undefined, rootResource: ${this.prefix}Resource, level=0): string => {
            return resource && this.${this.terraformObjectAssignmentTestName(attribute.id)}(resource, rootResource) ? \`\${this.indentation[level]}${attribute.name}${attribute.subtype === 'map' ? ' =' : ''} {
    ${Object.entries(childAttributes).filter(([k, v]) => !this.ignoreAttributes.includes(v.id)).map(([k, a]) => this.attributeToTerraformAssignment(resource, k, a, level+1)).join('\n    ')}
    \${this.indentation[level]}}\` : '# ${attribute.name} is not defined. Type: ${attribute.type} SubType: ${attribute.subtype} Required: ${attribute.required}'
    }
    ${this.terraformObjectAssignmentTestName(attribute.id)} = (resource: ${this.generateModelHierarchyReference(resource, attribute.id)} | undefined, rootResource: ${this.prefix}Resource): boolean => {
        return resource !== undefined && this.isPropertyAssignConditionTrue(${attribute.conditional}, ${JSON.stringify(attribute.condition)}, resource, rootResource) && (${Object.entries(childAttributes).filter(([k, v]) => !this.ignoreAttributes.includes(v.id)).length > 0 ? Object.entries(childAttributes).filter(([k, v]) => !this.ignoreAttributes.includes(v.id)).map(([k, a]) => this.attributeToAssignmentTest(resource, k, a)).join(' || ') : 'false'})
    }
    `
    }

    terraformObjectListElement = (resource: string, attribute: OcdSchemaAttribute, level=0) => {
        return `${this.terraformObjectElement(resource, attribute)}
    // ${OcdUtils.toResourceTypeName(attribute.name)} (${this.terraformObjectListName(attribute.name)})
    ${this.terraformObjectListName(attribute.id)} = (objectList: ${this.generateModelHierarchyReference(resource, attribute.id)}[] | undefined, rootResource: ${this.prefix}Resource, level=0): string => {
        return objectList && objectList.length > 0 ? \`\${objectList.map((o: ${this.generateModelHierarchyReference(resource, attribute.id)}) => this.${this.terraformObjectName(attribute.id)}(o, rootResource)).join(\`\\n\${this.indentation[level+1]}\`)}\` : '# ${attribute.name} is not defined. Type: ${attribute.type} SubType: ${attribute.subtype} Required: ${attribute.required}'
    }
    ${this.terraformObjectListAssignmentTestName(attribute.id)} = (objectList: ${this.generateModelHierarchyReference(resource, attribute.id)}[] | undefined, rootResource: ${this.prefix}Resource): boolean => {
        return objectList && objectList.length > 0 ? objectList.some((o: ${this.generateModelHierarchyReference(resource, attribute.id)}) => this.${this.terraformObjectAssignmentTestName(attribute.id)}(o, rootResource)) : false
    }
    `
    // # ObjectListElement ${this.toCamelCase(attribute.name)} Type ${attribute.type} SubType ${attribute.subtype} Required ${attribute.required} 
    }

    terraformSimpleName = (name: string) => `${this.toFunctionName(this.idToName(name, 1))}`
    terraformObjectName = (name: string) => `${this.toFunctionName(this.idToName(name, 1))}Object`
    terraformObjectListName = (name: string) => `${this.toFunctionName(this.idToName(name, 1))}ObjectList`
    terraformSimpleAssignmentTestName = (name: string) => `isAssign${this.idToName(name, 1)}`
    terraformObjectAssignmentTestName = (name: string) => `${this.terraformSimpleAssignmentTestName(name)}Object`
    terraformObjectListAssignmentTestName = (name: string) => `${this.terraformSimpleAssignmentTestName(name)}ObjectList`
    terraformReferenceDataFunctionName = (lookupResource: string) => `this.retrieve${this.capitaliseFirstCharacter(lookupResource.slice(0, -1))}Id()`

    outputFilename = (resource: string) => `${this.terraformFilename(resource)}.ts`

}
