/*
** Copyright (c) 2020, 2024, Oracle and/or its affiliates.
** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.
*/

import { OcdUtils } from '@ocd/core'
import { OcdSchema, OcdSchemaAttribute, OcdSchemaResource } from '../types/OcdSchema.js'
import { OcdCodeGenerator } from './OcdCodeGenerator.js'

export class OcdTerraformImportGenerator extends OcdCodeGenerator {
    terraformMetadataOverrides: Record<string, Record<string, any>> = {}
    resourceMap: Record<string, string> = {}
    constructor (prefix: string='Oci', commonElements: string[]=[], commonIgnoreElements: string[]=[]) {
        super(prefix, commonElements, commonIgnoreElements)
    }

    /*
    ** Content for the top level file. This will only be created if it does not exists.
    */
    content = (resource: string, schema: OcdSchema | OcdSchemaResource) => {
        const contents = `${this.copyright()}
    
import * as AutoGenerated from "./${this.generatedDirectory()}/${this.interfaceName(resource)}.js"

export class ${this.resourceName(resource)} extends AutoGenerated.${this.autoGeneratedResourceName(resource)} {}

export default ${this.resourceName(resource)}
`
        return contents
    }

    /*
    ** Content for the auto generated file this will be written on each execution.
    */
    autoGeneratedContent = (resource: string, schema: OcdSchema | OcdSchemaResource) => {
        const schemaObjects = this.getSchemaObjects(schema)
        const schemaAttributes = this.getSchemaAttributes(schema)
        const contents = `${this.copyright()}
${this.autoGeneratedWarning()}
/* eslint-disable @typescript-eslint/no-unused-vars */

import { ${this.prefix}TerraformResource } from '../../${this.prefix}TerraformResource.js'
import { ${this.prefix}ModelResources as Model, OcdDesign, ${this.prefix}Resource } from '@ocd/model'

export class ${this.autoGeneratedResourceName(resource)} extends ${this.prefix}TerraformResource {
    resource: Model.${this.interfaceName(resource)}
    constructor() {
        super()
        this.resource = Model.${this.interfaceName(resource)}.newResource()
    }
    generate(resourceName: string, resource: Record<string, any>): Model.${this.interfaceName(resource)} {
        console.debug('${this.autoGeneratedResourceName(resource)}.generate:', resource)
        this.resource.terraformResourceName = resourceName
        this.commonAssignments(resource, this.resource)
        ${Object.entries(schema.attributes).filter(([k, v]) => !this.ignoreAttributes.includes(v.id)).map(([k, a]) => this.attributeToTerraformAssignment(resource, k, a)).join('\n        ')}
        return this.resource
    }

    // Complex Elements
    ${schemaObjects.map((a: OcdSchemaAttribute) => this.terraformComplexElement(resource, a)).filter((s: string) => s.trim() !== '').join('\n    ')}
    // Simple Elements
    ${schemaAttributes.filter((a: OcdSchemaAttribute) => !this.ignoreAttributes.includes(a.id)).map((a: OcdSchemaAttribute) => this.terraformSimpleElement(resource, a)).filter((s: string) => s.trim() !== '').join('\n    ')}
}

export default ${this.autoGeneratedResourceName(resource)}
`
        return contents
    }

    /*
    ** Additional file content - ResourceBuilder
    */
    generateAdditionalFiles() {
        const resourceBuilderFilename = `${this.resourceFilename('resource_builder')}.ts`
        const resourceBuilderContent = `${this.copyright()}
${this.autoGeneratedWarning()}
import { OcdResource } from "@ocd/model"
import { OcdResourceBuilder } from '../../OcdResourceBuilder.js'
import { ${this.resources.toSorted(this.simpleSort).map((r) => this.resourceName(r)).join(',\n         ')} } from './resources.js'

export class OciResourceBuilder extends OcdResourceBuilder {
    constructor() {
        super()
        ${Object.entries(this.resourceMap).map(([k, v]) => `this.resourceMap.set('${k}', '${v}')`).join('\n        ')}
    }
    generate(terraformResource: string, resourceName: string, resourceData: Record<string, any>): OcdResource | null {
        switch(terraformResource) {
${Object.entries(this.resourceMap).map(([k, v]) => `${this.generateCaseStatement(k, this.resourceName(v))}`).join('\n')}
            default: {
                return null
            }
        }
    }
}
        `
        this.additionalFiles.push({filename: resourceBuilderFilename, contents: resourceBuilderContent})
    }
    /*
    ** Generate the Case Statement
    */
   generateCaseStatement(tfResourceName: string, ocdClassName: string) {
        const content = `            case '${tfResourceName}': {
                const resource = new ${ocdClassName}()
                return resource.generate(resourceName, resourceData)
            }`
        return content
   }
//     resourcesFileContent(resources: string[]) {
//         const contents = `${this.copyright()}
// ${this.autoGeneratedWarning()}

// ${this.resources.toSorted(this.simpleSort).map((r) => `export { ${this.resourceName(r)} } from './${this.resourcesDirectory()}/${this.resourceName(r)}.js'`).join('\n')}
//     `
//             return contents
//     }

    attributeToTerraformAssignment = (resource: string, name: string, attribute: OcdSchemaAttribute, level=0) => {
        const levelString = level === 0 ? ', this.resource' : ', ocdObjectElement, level+1'
        if (attribute.type === 'string' && attribute.lookup)                  return `this.${this.terraformSimpleName(attribute.id)}(resource${levelString})`
        else if (attribute.type === 'string')                                 return `this.${this.terraformSimpleName(attribute.id)}(resource${levelString})`
        else if (attribute.type === 'bool')                                   return `this.${this.terraformSimpleName(attribute.id)}(resource${levelString})`
        else if (attribute.type === 'number')                                 return `this.${this.terraformSimpleName(attribute.id)}(resource${levelString})`
        else if (attribute.type === 'list' && attribute.subtype === 'string') return `this.${this.terraformSimpleName(attribute.id)}(resource${levelString})`
        else if (attribute.type === 'list' && attribute.lookup)               return `this.${this.terraformSimpleName(attribute.id)}(resource${levelString})`
        else if (attribute.type === 'object')                                 return `if (resource.hasOwnProperty('${attribute.name}')) this.${this.terraformObjectName(attribute.id)}(resource.${attribute.name}${levelString})`
        // else if (attribute.type === 'object')                                 return `if (resource.hasOwnProperty('${this.modelElementName(attribute.name)}')) this.${this.terraformObjectName(attribute.id)}(resource.${attribute.name}${levelString})`
        else if (attribute.type === 'list' && attribute.subtype === 'object') return `this.${this.terraformObjectListName(attribute.id)}(resource.${attribute.name}${levelString})`
        else return `// ${this.toCamelCase(attribute.name)} Type ${attribute.type} SubType ${attribute.subtype} Required ${attribute.required}`
    }

    terraformSimpleElement = (resource: string, attribute: OcdSchemaAttribute, level=0) => {
        const simpleTypes = ['string', 'bool', 'number']
        const groupTypes = ['list', 'set']
        if (simpleTypes.includes(attribute.type) || (groupTypes.includes(attribute.type) && simpleTypes.includes(attribute.subtype))) {
            return `// ${OcdUtils.toResourceTypeName(attribute.name)} (${this.terraformSimpleName(attribute.id)})
    ${this.terraformSimpleName(attribute.id)} = (tfResource: Record<string, any>, ocdResource: Record<string, any>, level=0) => {ocdResource.${this.toCamelCase(attribute.name)} = tfResource?.${attribute.name}}
    `
        } else return ''
    }

    terraformComplexElement = (resource: string, attribute: OcdSchemaAttribute) => {
        if (attribute.type === 'object') return this.terraformObjectElement(resource, attribute)
        else if (attribute.type === 'list' && attribute.subtype === 'object') return this.terraformObjectListElement(resource, attribute)
        else return ``
    }

    terraformObjectElement = (resource: string, attribute: OcdSchemaAttribute, level=0) => {
        const childAttributes = attribute.attributes ? attribute.attributes : {}
        const createFunction = `create_${attribute.id}`
        return `// ${OcdUtils.toResourceTypeName(attribute.name)} (${this.terraformObjectName(attribute.name)})
    ${this.terraformObjectName(createFunction)} = (resource: Record<string, any>, ocdResource: Record<string, any>, level=0): ${this.generateModelHierarchyReference(resource, attribute.id)} => {
        const ocdObjectElement = {}
        ${Object.entries(childAttributes).filter(([k, v]) => !this.ignoreAttributes.includes(v.id)).map(([k, a]) => this.attributeToTerraformAssignment(resource, k, a, level+1)).join('\n        ')}
        return ocdObjectElement as ${this.generateModelHierarchyReference(resource, attribute.id)}
    }
    ${this.terraformObjectName(attribute.id)} = (resource: Record<string, any> | Record<string, any>[], ocdResource: Record<string, any>, level=0): ${this.generateModelHierarchyReference(resource, attribute.id)} => {
        const tfResource = Array.isArray(resource) && resource.length > 0 ? resource[0] : resource
        ocdResource.${this.toCamelCase(attribute.name)}  = this.${this.terraformObjectName(createFunction)}(tfResource, ocdResource)
        const ocdObjectElement = ocdResource.${this.toCamelCase(attribute.name)}
        return ocdResource.${this.toCamelCase(attribute.name)}
    }
    `
    }

    terraformObjectListElement = (resource: string, attribute: OcdSchemaAttribute, level=0) => {
        const createFunction = `create_${attribute.id}`
        return `${this.terraformObjectElement(resource, attribute)}
    // ${OcdUtils.toResourceTypeName(attribute.name)} (${this.terraformObjectListName(attribute.name)})
    ${this.terraformObjectListName(attribute.id)} = (objectList: ${this.generateModelHierarchyReference(resource, attribute.id)}[], ocdResource: Record<string, any>, level=0): ${this.generateModelHierarchyReference(resource, attribute.id)}[] => {
        ocdResource.${this.toCamelCase(attribute.name)} = []
        if (objectList && objectList.length > 0) ocdResource.${this.toCamelCase(attribute.name)} = objectList.map((o: ${this.generateModelHierarchyReference(resource, attribute.id)}) => this.${this.terraformObjectName(createFunction)}(o, ocdResource))
        return ocdResource.${this.toCamelCase(attribute.name)}
    }
    `
    }

    terraformSimpleName = (name: string) => `${this.toFunctionName(this.idToName(name, 1))}`
    terraformObjectName = (name: string) => `${this.toFunctionName(this.idToName(name, 1))}Object`
    terraformObjectListName = (name: string) => `${this.toFunctionName(this.idToName(name, 1))}ObjectList`
    terraformSimpleAssignmentTestName = (name: string) => `isAssign${this.idToName(name, 1)}`
    terraformObjectAssignmentTestName = (name: string) => `${this.terraformSimpleAssignmentTestName(name)}Object`
    terraformObjectListAssignmentTestName = (name: string) => `${this.terraformSimpleAssignmentTestName(name)}ObjectList`
    terraformReferenceDataFunctionName = (lookupResource: string) => `this.retrieve${this.capitaliseFirstCharacter(lookupResource.slice(0, -1))}Id()`

    outputFilename = (resource: string) => `${this.terraformFilename(resource)}.ts`
}

export default OcdTerraformImportGenerator
